#!/bin/bash

BRIGHTNESS_DEVICE="/sys/class/backlight/backlight-dsi"

PROG=$(basename $0)


MIN_BRIGHT=50
MAX_DISPLAY_AT_LL=4000000
ADAPT_TO_USER=1
ADAPATION_TIME=4
DEBUG=1

CONF_FILE="/etc/$PROG.conf"

TARGET_BRIGHTNESS=()



if [[ "$1" != "-r" ]]; then
    if [[ "$DEBUG" -ne 0 ]]; then
        monitor-sensor | bash -x $0 -r
    else
        monitor-sensor | $0 -r
    fi
    exit $?
fi


function get_brightness {
    OUTPUT=$(cat ${BRIGHTNESS_DEVICE}/brightness)
}

function set_brightness {
    local NEW_BRIGHT="$1"
    if [[ "$NEW_BRIGHT" -gt "$MAX_BRIGHT" ]]; then
        NEW_BRIGHT="$MAX_BRIGHT"
    fi
    if [[ "$NEW_BRIGHT" -lt "$MIN_BRIGHT" ]]; then
        NEW_BRIGHT="$MIN_BRIGHT"
    fi
    echo "$NEW_BRIGHT" > ${BRIGHTNESS_DEVICE}/brightness
}

function setup {
    if [[ -d /sys/class/backlight/backlight-dsi ]]; then
        BRIGHTNESS_DEVICE=/sys/class/backlight/backlight-dsi
    elif [[ /sys/class/backlight/backlight ]]; then
        BRIGHTNESS_DEVICE=/sys/class/backlight/backlight
    else
        echo "Error! Could not find mechanism to adjust acreen brightness... Exiting." 1>&2
        exit 1
    fi
    MAX_BRIGHT=$(cat ${BRIGHTNESS_DEVICE}/max_brightness)
}

function display_on {
    OUTPUT=$(cat ${BRIGHTNESS_DEVICE}/bl_power )
}

function determine_needed_brightness {
    local LIGHT_LEVEL="$1"
    local LL_PER_OF_MAX=$(( $LIGHT_LEVEL * 100 / $MAX_DISPLAY_AT_LL ))
    BRIGHT_MOD=$(( $MAX_BRIGHT - $MIN_BRIGHT ))

    SET_BRIGHT=$(( $LL_PER_OF_MAX * $BRIGHT_MOD / 100 + $MIN_BRIGHT ))
    if [[ "$SET_BRIGHT" -gt "$MAX_BRIGHT" ]]; then
        SET_BRIGHT="$MAX_BRIGHT"
    fi
    set_target_brightness "$SET_BRIGHT"
}

function refactor_brightness {
    local OLD_BRIGHT="$1"
    local NEW_BRIGHT="$2"
    local LL="$3"

    if [[ "$ADAPT_TO_USER" -eq 0 ]]; then
        return
    fi

    # If difference is negligable, ignore it. (< 1%)
    local DIFF_PER=$(( ($NEW_BRIGHT - $OLD_BRIGHT) * 100 / $MAX_BRIGHT ))
    if [[ "$DIFF_PER" -eq "0" ]]; then
        return
    fi

    echo "Detected User change to brightness to: $NEW_BRIGHT at light level: $LL"
    if [[ $LL -eq 0 ]]; then
        MIN_BRIGHT="$NEW_BRIGHT"
        echo "Set min Brightness to: $NEW_BRIGHT"
    	write_config
        return
    fi
    
    MAX_DISPLAY_AT_LL=$(( $LL * 100 / ($NEW_BRIGHT * 100 / $MAX_BRIGHT ) ))
    echo "Set max display at LL to: $MAX_DISPLAY_AT_LL"
    write_config
}

function set_target_brightness {
    local SET_BRIGHT="$1"
    TARGET_BRIGHTNESS+=( "$SET_BRIGHT" )
    TARGET_BR_TIME+=( $(date +%s) )

    local NOW=$(date +%s)

    while [[ $(("$NOW" - "${TARGET_BR_TIME[0]}" )) -gt "$ADAPATION_TIME" ]]; do
        unset TARGET_BRIGHTNESS[0]
        unset TARGET_BR_TIME[0]
    done

}

function read_config {
    if [[ -z "$CONF_FILE" ]]; then
        echo "CONF_FILE not defined!"
	return
    fi
    if [[ ! -f "$CONF_FILE" ]]; then
        return
    fi
    source "$CONF_FILE"
}
function write_config {
    if [[ -z "$CONF_FILE" ]]; then
        echo "CONF_FILE not defined!"
	return
    fi
    sed -i "s/^MIN_BRIGHT=.*$/MIN_BRIGHT='$MIN_BRIGHT'/g" "$CONF_FILE"
    sed -i "s/^MAX_DISPLAY_AT_LL=.*$/MAX_DISPLAY_AT_LL='$MAX_DISPLAY_AT_LL'/g" "$CONF_FILE"
    sed -i "s/^ADAPT_TO_USER=.*$/ADAPT_TO_USER='$ADAPT_TO_USER'/g" "$CONF_FILE"
}

function process_sensor_line {
    line=$1
    case "$line" in
        *"Light changed:"*)
            LIGHT_LEVEL=$(echo "$line" | sed 's/[^0-9]//g' | sed 's/^0*//g')
            determine_needed_brightness "$LIGHT_LEVEL"
        ;;
        "=== Has ambient light sensor"*)
            LIGHT_LEVEL=$(echo "$line" | sed 's/[^0-9]//g' | sed 's/^0*//g')
            determine_needed_brightness "$LIGHT_LEVEL"
        ;;
    esac
}

function manage_brightness {
    local TOTAL=0
    local ITEM TOTAL AVG
    if [[ -z "$TARGET_BRIGHTNESS" ]]; then
        return
    fi
    for ITEM in "${TARGET_BRIGHTNESS[@]}"; do
        TOTAL+="$ITEM"
    done
    AVG=$(( "$TOTAL" / "${#TARGET_BRIGHTNESS[@]}" ))

    display_on
    local DISPLAY_ON="$OUTPUT"

    get_brightness
    local CUR_BRIGHTNESS="$OUTPUT"
    
    if [[ -n "$LAST_BRIGHTNESS" && "$DISPLAY_ON" -eq 0 ]]; then
        if [[ "$CUR_BRIGHTNESS" -ne "$LAST_BRIGHTNESS" ]]; then
            refactor_brightness "$LAST_BRIGHTNESS" "$CUR_BRIGHTNESS" "$LAST_LL"
        fi
    fi

    set_brightness "$AVG"

    # Check that this actually got set 
    get_brightness
    local CUR_BRIGHTNESS="$OUTPUT"
    if [[ "$CUR_BRIGHTNESS" -eq "$SET_BRIGHT" ]]; then
        LAST_BRIGHTNESS="$SET_BRIGHT"
        LAST_LL="$LIGHT_LEVEL"
        echo "Light Level changed to: $LIGHT_LEVEL"
        echo "Set Brightness to: $SET_BRIGHT"
    else
        echo "Failed to set brightness"
        LAST_BRIGHTNESS=""
        LAST_LL=""
    fi
}

function main {
    setup
    read_config

    echo "MAX_BRIGHT: $MAX_BRIGHT"
    echo "MIN_BRIGHT: $MIN_BRIGHT"
    echo "MAX_DISPLAY_AT_LL: $MAX_DISPLAY_AT_LL"
    echo "ADAPT_TO_USER: $ADAPT_TO_USER"

    local LAST_RUN_TIME=0

    while true; do
        read -t 1 -r line
        process_sensor_line "$line"

        # ensure we only run manage_brightness every second and no more
        CUR_RUN_TIME=$(date +%s)
        if [[ "$CUR_RUN_TIME" -le "$LAST_RUN_TIME" ]]; then
            continue
        fi
        manage_brightness
        LAST_RUN_TIME=$(date +%s)
    done
}
main

